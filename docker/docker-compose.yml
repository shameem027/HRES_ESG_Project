# --- File: docker/docker-compose.yml (Definitive Final Version - With Airflow Integration) ---
version: '3.8' # Retaining version for clarity, though it's often implicit now

services:
  # --- DATABASE SERVICE for MLflow & Airflow Metadata ---
  postgres:
    image: postgres:13
    container_name: hres_postgres
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_db_data:/var/lib/postgresql/data
    networks:
      - hres_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s # Give Postgres a moment to start
    restart: unless-stopped

  # --- MLFLOW SERVICE for Experiment Tracking ---
  mlflow:
    build:
      context: ..
      dockerfile: docker/Dockerfile.mlflow
    container_name: hres_mlflow
    env_file: .env
    ports:
      - "5000:5000"
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    networks:
      - hres_network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@hres_postgres:5432/${POSTGRES_DB}
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0"
    healthcheck: # Added healthcheck for MLflow
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # --- AIRFLOW DATABASE INITIALIZATION (Run Once) ---
  # This service runs once to initialize Airflow's database, then exits.
  airflow-init:
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow # A new Dockerfile for Airflow
    container_name: hres_airflow_init
    env_file: .env
    networks:
      - hres_network
    depends_on:
      postgres:
        condition: service_healthy
    command: ["bash", "-c", "airflow db migrate && airflow users create --username ${AIRFLOW_WWW_USER_USERNAME} --password ${AIRFLOW_WWW_USER_PASSWORD} --firstname Airflow --lastname User --role Admin --email airflow@example.com"]
    # We do not restart this service as it's a one-off initialization.
    restart: "no" # Ensure it doesn't restart continuously

  # --- AIRFLOW WEBSERVER ---
  airflow-webserver:
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow
    container_name: hres_airflow_webserver
    env_file: .env
    ports:
      - "8080:8080" # Airflow UI uses 8080
    volumes:
      - ../airflow/dags:/opt/airflow/dags
      - ../src:/opt/airflow/src # Mount src for DAGs and ML model
      - ../requirements.txt:/opt/airflow/requirements.txt # Ensure Airflow has project deps
    networks:
      - hres_network
    depends_on:
      airflow-init: # Wait for DB to be initialized
        condition: service_completed_successfully
      mlflow: # Airflow might interact with MLflow
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s # Give webserver time to start
    command: ["airflow", "webserver"]
    restart: unless-stopped

  # --- AIRFLOW SCHEDULER ---
  airflow-scheduler:
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow
    container_name: hres_airflow_scheduler
    env_file: .env
    volumes:
      - ../airflow/dags:/opt/airflow/dags
      - ../src:/opt/airflow/src
      - ../requirements.txt:/opt/airflow/requirements.txt
    networks:
      - hres_network
    depends_on:
      airflow-webserver:
        condition: service_healthy # Depend on webserver being up
    command: ["airflow", "scheduler"]
    restart: unless-stopped

  # --- API SERVICE (Flask + HRES Decision Engine + ML Prediction) ---
  api:
    build:
      context: .. # Builds from the project root (Course_Project1/)
      dockerfile: docker/Dockerfile.api
    container_name: hres_api
    env_file: .env
    volumes:
      - ../src:/app/src
      - ../api:/app/api
    ports:
      - "8081:8080" # Changed API to use host port 8081 to avoid conflict with Airflow webserver 8080
    networks:
      - hres_network
    depends_on: # API needs MLflow for model loading
      mlflow:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"] # API's internal port is 8080
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 20s
    restart: unless-stopped

  # --- UI SERVICE (Streamlit Dashboard) ---
  ui:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ui
    container_name: hres_ui
    volumes:
      - ../ui.py:/app/ui.py
      - ../logo.png:/app/logo.png
    ports:
      - "8501:8501"
    networks:
      - hres_network
    depends_on:
      api:
        condition: service_healthy # UI depends on our custom API
    restart: unless-stopped

  # --- JUPYTER SERVICE for Data Science & Experimentation ---
  jupyter:
    build:
      context: ..
      dockerfile: docker/Dockerfile.jupyter
    container_name: hres_jupyter
    ports:
      - "8888:8888"
    volumes:
      - ../src:/home/jovyan/src
      - ../notebooks:/home/jovyan/notebooks
      - ../requirements.txt:/home/jovyan/requirements.txt # Ensure Jupyter has project deps
    networks:
      - hres_network
    restart: unless-stopped

networks:
  hres_network:
    driver: bridge

volumes:
  postgres_db_data:
  mlflow_artifacts: