# --- File: docker/docker-compose.yml ---
version: '3.8'

services:
  hres_postgres:
    image: postgres:13
    container_name: hres_postgres
    hostname: hres_postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - hres_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  hres_mlflow:
    container_name: hres_mlflow
    build:
      context: ..
      dockerfile: docker/Dockerfile.mlflow
    environment:
      - DB_HOST=hres_postgres
      - DB_PORT=5432
      - BACKEND_STORE_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@hres_postgres:5432/${POSTGRES_DB}
      - ARTIFACT_ROOT=file:/mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    ports:
      - "5000:5000"
    networks:
      - hres_network
    depends_on:
      hres_postgres:
        condition: service_healthy

  init_airflow:
    container_name: init_airflow
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow
    entrypoint: /bin/bash
    command: -c "airflow db init && airflow users create --username ${AIRFLOW_WWW_USER_USERNAME} --password ${AIRFLOW_WWW_USER_PASSWORD} --firstname Md_Shameem --lastname Hossain --role Admin --email shameem.hossain@email.com"
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_EXECUTOR}
    networks:
      - hres_network
    depends_on:
      hres_postgres:
        condition: service_healthy

  hres_airflow_webserver:
    container_name: hres_airflow_webserver
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow
    command: airflow webserver
    ports:
      - "8080:8080"
    volumes:
      - airflow_logs:/opt/airflow/logs
      - ../src:/opt/airflow/src # Mount src for DAGs
    networks:
      - hres_network
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_EXECUTOR}
      - MLFLOW_TRACKING_URI=http://hres_mlflow:5000 # For DAGs to connect to MLflow
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      init_airflow:
        condition: service_completed_successfully

  hres_airflow_scheduler:
    container_name: hres_airflow_scheduler
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow
    command: airflow scheduler
    volumes:
      - airflow_logs:/opt/airflow/logs
      - ../src:/opt/airflow/src # Mount src for DAGs
    networks:
      - hres_network
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_EXECUTOR}
      - MLFLOW_TRACKING_URI=http://hres_mlflow:5000
    depends_on:
      init_airflow:
        condition: service_completed_successfully

  hres_api:
    container_name: hres_api
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    ports:
      - "8081:8080"
    volumes:
      - ../src:/app/src
      - ../api:/app/api
    networks:
      - hres_network
    environment:
      # Pass Azure credentials from .env to the API container
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION}
      - AZURE_DEPLOYMENT_NAME=${AZURE_DEPLOYMENT_NAME}
      - MLFLOW_TRACKING_URI=http://hres_mlflow:5000
    depends_on:
      hres_mlflow:
        condition: service_started

  hres_jupyter:
    container_name: hres_jupyter
    build:
      context: ..
      dockerfile: docker/Dockerfile.jupyter
    command: "start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''"
    ports:
      - "8888:8888"
    volumes:
      - ../src:/home/jovyan/src
      - ../notebooks:/home/jovyan/notebooks
    networks:
      - hres_network

  hres_ui:
    container_name: hres_ui
    build:
      context: ..
      dockerfile: docker/Dockerfile.ui
    ports:
      - "8501:8501"
    volumes:
      - ../ui.py:/app/ui.py
      - ../logo.png:/app/logo.png
    networks:
      - hres_network
    environment:
      - API_BASE_URL=http://hres_api:8080 # UI will communicate with API via service name

volumes:
  postgres_db_data:
  mlflow_artifacts:
  airflow_logs:

networks:
  hres_network:
    driver: bridge