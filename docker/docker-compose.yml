# --- File: docker/docker-compose.yml (Definitive, Final, Simplified Version) ---
services:
  hres_postgres:
    image: postgres:13
    container_name: hres_postgres
    env_file: .env
    volumes:
      - postgres_db_data:/var/lib/postgresql/data
    networks:
      - hres_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # This service now correctly initializes the Airflow DB and exits
  airflow-init:
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow
    container_name: airflow-init
    env_file: .env
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init
        airflow users create \
          --username ${_AIRFLOW_WWW_USER_USERNAME} \
          --password ${_AIRFLOW_WWW_USER_PASSWORD} \
          --firstname Shameem \
          --lastname Hossain \
          --role Admin \
          --email shameem.hossain@email.com || true
    networks:
      - hres_network
    depends_on:
      hres_postgres:
        condition: service_healthy

  hres_airflow_webserver:
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow
    container_name: hres_airflow_webserver
    command: webserver
    env_file: .env
    ports:
      - "8080:8080"
    volumes:
      - ../src:/opt/airflow/src
      - ../airflow/dags:/opt/airflow/dags
    networks:
      - hres_network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  hres_airflow_scheduler:
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow
    container_name: hres_airflow_scheduler
    command: scheduler
    env_file: .env
    volumes:
      - ../src:/opt/airflow/src
      - ../airflow/dags:/opt/airflow/dags
    networks:
      - hres_network
    depends_on:
      hres_airflow_webserver:
        condition: service_healthy

  hres_mlflow:
    build:
      context: ..
      dockerfile: docker/Dockerfile.mlflow
    container_name: hres_mlflow
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@hres_postgres:5432/${POSTGRES_DB}
      --default-artifact-root file:/mlflow/artifacts
      --host 0.0.0.0
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    ports:
      - "5000:5000"
    networks:
      - hres_network
    depends_on:
      hres_postgres:
        condition: service_healthy

  hres_api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: hres_api
    env_file: .env
    ports:
      - "8081:8080"
    networks:
      - hres_network
    depends_on:
      hres_mlflow:
        condition: service_started

  hres_jupyter:
    build:
      context: ..
      dockerfile: docker/Dockerfile.jupyter
    container_name: hres_jupyter
    command: "start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''"
    ports:
      - "8888:8888"
    volumes:
      - ../src:/home/jovyan/src
      - ../notebooks:/home/jovyan/notebooks
    networks:
      - hres_network

  hres_ui:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ui
    container_name: hres_ui
    ports:
      - "8501:8501"
    networks:
      - hres_network
    environment:
      - API_BASE_URL=http://hres_api:8080

networks:
  hres_network:
    driver: bridge

volumes:
  postgres_db_data:
  mlflow_artifacts: