# --- File: docker/docker-compose.yml (Definitive Final Version) ---
services:
  hres_postgres:
    image: postgres:13
    container_name: hres_postgres
    hostname: hres_postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_db_data:/var/lib/postgresql/data
    networks: # Explicitly attach to the network
      - hres_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  hres_mlflow:
    container_name: hres_mlflow
    build:
      context: ..
      dockerfile: docker/Dockerfile.mlflow
    environment:
      - DB_HOST=hres_postgres
      - DB_PORT=5432
      - BACKEND_STORE_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@hres_postgres:5432/${POSTGRES_DB}
      - ARTIFACT_ROOT=file:/mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    ports:
      - "5000:5000"
    networks: # Explicitly attach to the network
      - hres_network
    depends_on:
      hres_postgres:
        condition: service_healthy

  hres_airflow_webserver:
    container_name: hres_airflow_webserver
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow
    command: airflow webserver
    ports:
      - "8080:8080"
    volumes:
      - airflow_logs:/opt/airflow/logs
    networks: # Explicitly attach to the network
      - hres_network
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_EXECUTOR}
      - AIRFLOW_WWW_USER_USERNAME=${AIRFLOW_WWW_USER_USERNAME}
      - AIRFLOW_WWW_USER_PASSWORD=${AIRFLOW_WWW_USER_PASSWORD}
      - MLFLOW_TRACKING_URI=http://hres_mlflow:5000
    depends_on:
      hres_postgres:
        condition: service_healthy

  hres_airflow_scheduler:
    container_name: hres_airflow_scheduler
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow
    command: airflow scheduler
    volumes:
      - airflow_logs:/opt/airflow/logs
    networks: # Explicitly attach to the network
      - hres_network
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_EXECUTOR}
      - MLFLOW_TRACKING_URI=http://hres_mlflow:5000
    depends_on:
      hres_postgres:
        condition: service_healthy

  hres_api:
    container_name: hres_api
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    ports:
      - "8081:8080"
    networks: # Explicitly attach to the network
      - hres_network
    environment:
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION}
      - AZURE_DEPLOYMENT_NAME=${AZURE_DEPLOYMENT_NAME}
      - MLFLOW_TRACKING_URI=http://hres_mlflow:5000
    depends_on:
      hres_mlflow:
        condition: service_started

  hres_jupyter:
    container_name: hres_jupyter
    build:
      context: ..
      dockerfile: docker/Dockerfile.jupyter
    command: "start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''"
    ports:
      - "8888:8888"
    volumes:
      - ../src:/home/jovyan/src
      - ../notebooks:/home/jovyan/notebooks
    networks: # Explicitly attach to the network
      - hres_network

  hres_ui:
    container_name: hres_ui
    build:
      context: ..
      dockerfile: docker/Dockerfile.ui
    ports:
      - "8501:8501"
    networks: # Explicitly attach to the network
      - hres_network
    environment:
      - API_BASE_URL=http://hres_api:8080

# Define the top-level network
networks:
  hres_network:
    driver: bridge

# Define the top-level volumes
volumes:
  postgres_db_data:
  mlflow_artifacts:
  airflow_logs: